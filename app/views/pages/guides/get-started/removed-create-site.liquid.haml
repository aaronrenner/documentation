THIS PAGE IS DEPRECIATED

{% extends 'guides/get-started' %}

{% block 'main/left/content' %}
:markdown
  # 1. Prepare your environment'

  We recommend you to store all the websites built with the editor into a same parent folder.

      mkdir -p ~/Documents/LocomotiveCMS/sites
      cd ~/Documents/LocomotiveCMS/sites

  # 2. Generate a website

      locomotive_editor create -n my_first_website

  This will create a folder named my\_first\_website populated a default index page and the tree structure you need to make your site.

  <div class="alert alert-info">
  <strong>Note:</strong> You can also decide not to start from scratch and use a pre-existing site template (ie: twitter_bootstrap_haml). <a href="/faq/site-templates">Learn about site templates</a>.
  </div>
  Structure of the generated website

  <table>
    <thead>
      <tr>
        <th>File / Folder</th>
        <th>Purpose</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>app/content_types</td>
        <td>The definitions of the content types are stored here (file extension: .yml)</td>
      </tr>
      <tr>
        <td>app/views/pages</td>
        <td>Html pages using Liquid (file extensions: .liquid, .liquid.haml) <a href="/guides/get-started/liquid">learn more about Liquid</a></td>
      </tr>
      <tr>
        <td>app/views/snippets</td>
        <td>Snippets files : reusable blocks using Liquid (file extensions: .liquid or .liquid.haml)</td>
      </tr>
      <tr>
        <td>config/site.yml</td>
        <td>Your site config file. It describes the information about your site (meta) and your pages</td>
      </tr>
      <tr>
        <td>config/deploy.yml</td>
        <td>It describes the targets where to push your site</td>
      </tr>
      <tr>
        <td>data</td>
        <td>Each content type can have its own set of data. They are described in Yaml files under this folder</td>
      </tr>
      <tr>
        <td>public/fonts</td>
        <td>The font files here (from FontSquirrel for instance)</td>
      </tr>
      <tr>
        <td>public/images</td>
        <td>All the images needed by your layouts</td>
      </tr>
      <tr>
        <td>public/javascripts</td>
        <td>The javascript files (file extensions: .js or .js.coffee)</td>
      </tr>
      <tr>
        <td>public/stylesheets</td>
        <td>The stylesheets files (file extensions: .css or .css.scss)</td>
      </tr>
      <tr>
        <td>public/samples</td>
        <td>The files you use for your content types or the editable contents inside pages</td>
      </tr>
    </tbody>
  </table>

  # 3. Test your site with the Wagon webserver

  Wagon includes a webserver to test and run your site before you push it to a LocomotiveCMS site.
  Make sure you are still on the parent folder of my_first_website and run:

      locomotive_editor run -n my_first_website
      open http://0.0.0.0:3333

  Here you go, you can now modify your sites within your IDE. By simply refresh your browser, you will able to see the changes you have just made !

  Open another terminal, and open your site (here using Textmate for example): 

      cd ~/Documents/LocomotiveCMS/sites
      mate my_first_website

  <div class="alert alert-info">
  <strong>Note:</strong>
  At this point, you could version your website with <a href="http://git-scm.com">GIT</a>, <a href="http://subversion.tigris.org/">SUBVERSION</a> or any SCM. <br />
  <a href="/guides/get-started/development-workflow">Learn more about the ideal development workflow</a>.
  </div>

  # 4. Reuse the index page as a template in a second page.

  Let's use some Liquid markups. Liquid is a templating library extracted from Shopify, the project is hosted at http://liquidmarkup.org. LocomotiveCMS reuses a lot of the original library.

  The index page already exists: check out `app/views/index.liquid`. You can see a "Liquid block" : 
      {% raw %}`{% block 'main' %}` (...) `{% endblock %}`{% endraw %}.
  It simply means that anything in the "main" block can be overriden on a child page.
  
  With your IDE, create a second page `app/view/page2.liquid` with this content: 
  
      {% raw %}{% extends parent %}
      {% block 'main' %}
        Hey, you're in page 2!
      {% endblock %}
  {% endraw %}

  Open http://0.0.0.0:4567/page2 in your browser. Look at the source: you can see the index page source on which the main block has been overriden.
  
  In a LocomotiveCMS website, pages are organized in a tree where the root is the index page.
  The {% raw %}`{% extends parent %}`{% endraw %} means that the parent page will be used as the layout for page2.

  <div class="alert alert-info">
  <strong>Note:</strong>
  A page can extend any other page, and you can have as many block level as you want.<br />
  <a href="#TODO">Learn more about the templating language</a>.
  </div>

  # 5. Define page title, url

  TODO avec le builder (plus de site.yml).



  

  # 7. Deploy your site!

  Now your site is ready,



  <div class="alert alert-info">
  <strong>Et voil√† !</strong>
  You know understand the basic of LocomotiveCMS! 
  </div>


  

  - add images, stylesheets and javascripts
  - TODO add links to other guides


{% endblock %}
