{% extends 'index' %}

{% block 'main' %}

.hero-unit
  %h1 Public Form Submission

  %br

  %p Allow users to submit forms via your website

/ === 1 ===

%h3 1. Create a Content Type with Public Submission Enabled

%br

%p
  To accept forms from the public, you first must create a content type 
  that will store the submissions. You need to have 
  %a{:href => "/editor/installation"}locomotive_editor
  installed before continuing.

%pre
  locomotive_editor generate -n my_first_website customer_messages name:string email:string message:text

%p
  Remove the data/customer_messages.yml, since you won't be pre-populating the content
  type with entires

%pre
  rm my_first_website/data/customer_messages.yml

%p
  Now modify app/content_types/customer_messages.yml so it looks like this:

%pre
  =preserve do
    :escaped
      name: Customer Messages
      description: Messages submitted via the website
      slug: customer_messages
      label_field_name: name
      fields:
      - name:
          label: Name
          type: string
          required: true
      - email:
          label: Email
          type: string
          required: true
      - message:
          label: Message
          type: text
          required: true
      public_submission_enabled: true

/ === 2 ===

%h3 2. Create A Form

%br

%p Now, you need to embed your form on a web page. Create the following page in app/views/pages/contact.liquid

%pre
  =preserve do
    :escaped
      {% raw %}
        <html>
          <body>
            <form method="POST" action="{{contents.customer_messages.public_submission_url}}">
              {% csrf_param %}
              <input type="hidden" value="/" name="success_callback" />
              <input type="hidden" value="/contact" name="error_callback" />

              {% if customer_message.errors %}
                <p>The following errors occured:</p>
                <ul>
                {% for error in customer_message.errors %}
                  <li>{{error[0] | capitalize}} -  {{error[1]}}</li>
                {% endfor %}
                </ul>
              {% endif %}

              <table>
                <tr>
                  <td>Name:</td>
                  <td><input type="text" name="content[name]" value="{{customer_message.name}}"></td>
                </tr>
                <tr>
                  <td>Email:</td>
                  <td><input type="text" name="content[email]" value="{{customer_message.email}}"></td>
                </tr>
                <tr>
                  <td>Message:</td>
                  <td><textarea name="content[message]">{{customer_message.message}}</textarea></td>
                </tr>
              </table>
              <input type="submit">
            </form>
          </body>
        </html>
      {% endraw %}

%p Lets go through it section by section...

%p This line sets up the form so its action goes to the Customer Messages content type's public submission url.
%pre
  =preserve do
    :escaped
      {% raw %}
        <form method="POST" action="{{contents.customer_messages.public_submission_url}}">
      {% endraw %}

%p 
  The csrf_param tag inserts the Cross-Site Request Forgery 
  parameter, which is needed if you turn on csrf protection. You can read more
  %a{ :href => '/templates/tags#csrf-param-section' } here.
%pre
  =preserve do
    :escaped
      {% raw %}
        {% csrf_param %}
      {% endraw %}

%p The next two lines control where the user is redirected on success or error.
%pre
  =preserve do
    :escaped
      <input type="hidden" value="/" name="success_callback" />
      <input type="hidden" value="/contact" name="error_callback" />

%p 
  Now on to error rendering. The most recently submitted
  content entry is stored in a variable that is the singular version of its
  Content Type's slug. For example, since we have a Customer Messages content
  type with a slug of customer_messages, the last submitted content entry is
  available as customer_message.

%p 
  You can now loop through the errors attribute on customer_message and display
  those errors in the form. Error[0] is the field name and error[1] is the
  list of errors on that field.

%pre
  =preserve do
    :escaped
      {% raw %}
        {% if customer_message.errors %}
          <p>The following errors occured:</p>
          <ul>
          {% for error in customer_message.errors %}
            <li>{{error[0] | capitalize}} -  {{error[1]}}</li>
          {% endfor %}
          </ul>
        {% endif %}
      {% endraw %}
      

%p 
  The next section actually does the form submission. Data needs to be submitted
  by fields with the following naming convention: content[field_name]. Also, as
  noted above, the last submitted content entry is available as customer_message.
  This allows us to re-populate the form on error with
  {%raw%}{{customer_message.field_name}}{%endraw %}.

%pre
  =preserve do
    :escaped
      {% raw %}
        <table>
          <tr>
            <td>Name:</td>
            <td><input type="text" name="content[name]" value="{{customer_message.name}}"></td>
          </tr>
          <tr>
            <td>Email:</td>
            <td><input type="text" name="content[email]" value="{{customer_message.email}}"></td>
          </tr>
          <tr>
            <td>Message:</td>
            <td><textarea name="content[message]">{{customer_message.message}}</textarea></td>
          </tr>
        </table>
      {% endraw %}

%p
  Now all you need is a plain old submit button, and your form will allow users
  to send you messages through your website.
%pre
  =preserve do
    :escaped
      <input type="submit">

%h3 Notes

%br

%p
  You can also submit your forms using AJAX and something like
  %a{ :href=> "http://malsup.com/jquery/form/" } jQuery Form.
  You will be able to detect success or failure via the HTTP status
  codes. Your errors or your newly created object will be
  returned to you as JSON. Below is an example of the error format:

%pre
  {%raw%}{"errors":{"_slug":["can't be blank"],"name":["can't be blank"],"email":["can't be blank"],"message":["can't be blank"]}}{%endraw %}
{% endblock %}
