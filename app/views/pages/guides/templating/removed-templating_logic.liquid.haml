---
title: Templating logic
listed: false
published: false
---
{% extends 'guides/templating' %}

{% block 'main/left/content' %}

:markdown
  # Templating Logic

  ## Basics of inheritance

  The logic in LocomotiveCMS is differs a bit from what you are certainly used to, it may be weird a first, but it's actually very simple.

  In the classic, Rails way, you have the following architecture, with page's content integrated in the application layout using the ``` yield ``` statement :

      +- Views
          +- layout
              +- application
          +- mysite
              +- index
              +- first page
              +- second page

  In Locomotive, it's a bit different :

      +- Pages
          +- index
              +- first page
              +- second page

  All pages inherit from index. This way, the index contains the application's layout and the index page content. How do you re-use the layout without re-using the index page content ? By introducing

      {% raw %}{% block 'block_name' %} ... {% endblock %}
  {% endraw %}

  Since all pages inherit from index, you declare blocks of content inside the layout (index), which will be overwritten in child pages. Here is a the simplest example :

  Index page :

      {% raw %}<html>
        <head>
          <title>My index page</title>
        </head>
        <body>
          <header>
            layout header
          </header>
          <div id="content">
            {% block content %}
              the content of the index page
            {% endblock %}
          </div>
          <footer>
            layout footer
          </footer>
        </body>
      </html>
  {% endraw %}

  A page, which inherits from index :

      {% raw %}{% extends parent %}

      {% block content %}
        the content of this page
      {% endblock %}
  {% endraw %}

  By extending index, 'a-page' re-use all of its content, except the content inside the ```{% raw %} {% block %} {% endraw %}``` tag which is overwritten. This tag is written with the Liquid syntax which will is explained later.

  You can have as many ```{% raw %} {% block %} {% endraw %}``` tags as you want, everywhere in the layout, as long as the name of each block is unique. For a basic application which only have one layout, that's all you need to know.

  ## Going further

  ### Several levels of inheritance

  The principle of page's inheritance can be applied to every page.
  When you create a page, it automatically inherits from index, but you can also make it inherits from another page, by specifying it's parent :

  By doing so, you can define as many levels as you want :

      +- Pages
          +- index
              +- first page
                  +- child of first page
                      +- child of first page's child
              +- second page

  **Inherit from an other page than the parent one**

  When you extend the parent's layout, you use the tag ```{% raw %} {% extends parent %} ```, but what if you would like to extends a page which isn't a direct parent ?

  For example, how would you make "first page" extends "second page" ?

      +- Pages
          +- index
              +- first page
              +- second page

  It's simple : ``` {% extends first_page %} ``` !
  You specify the page you want to extend with its *slug*.

  src: http://doc.locomotivecms.com/references/tags#extends-section

  ### What about several layouts ?

  Let's say your website needs two layouts, how do it without putting the entire index in ```{% raw %} {% block %} {% endraw %}``` tags ? It's actually fairly simple : you are not forced to make a page inherits its content from another.

  Remember the previous page we created which inherited from index :
      {% raw %}{% extends parent %}

      {% block content %}
        the content of this page
      {% endblock %}
  {% endraw %}

  Well, actually the tag ```{% raw %} {% extends parent %} {% endraw %}``` can be removed, so the page doesn't extends any other page, letting you define a brand new layout if needed.

  Let's illustrate this with an example:

  - the main layout of the site will be define in index
  - a second layout will be defined in a page called "alternate_layout"
  - we will have a page called "normal" which will use the main layout
  - and finally an other page called "alternate_page" which will use the alternate layout

  The skeleton will look like that :

      +- Pages
          +- index
              +- normal
              +- alternate_layout
                  +- alternate_page

  Here we go :

  First, the index page :

      {% raw %}<html>
      <head>
        <title>The Main Layout</title>
      </head>
      <body>
        <header>
          Main header
        </header>
        <div id="content">
          {% block main_content %}
            the content of the index page
          {% endblock %}
        </div>
        <footer>
          Main footer
        </footer>
      </body>
      </html>
  {% endraw %}

  The "normal" page, which inherits from it index :

      {% raw %}{% extends parent %}

      {% block main_content %}
        the content of the normal page
      {% endblock %}
  {% endraw %}

  Then the "alternate layout" page, which doesn't extends its parent, index :

      {% raw %}<html>
        <head>
          <title>The Alternate Layout</title>
        </head>
        <body>
          <header>
            Alternate header
          </header>
          <div id="content">
            {% block alternate_content %}
              the content of the alternate layout page, it can be empty if you just want to define an empty layout
            {% endblock %}
          </div>
          <footer>
            Alternate footer
          </footer>
        </body>
      </html>
  {% endraw %}

  And finally, the "alternate page", which inherits from "alternate layout". You may notice the ```{% raw %} {% extends alternate_layout %} {% endraw %}``` instead of ```{% raw %} {% extends parent %} {% endraw %}```, as explained in the previous part.

      {% raw %}{% extends alternate_layout %}

      {% block alternate_content %}
        the content of alternate page, using the layout defined in alternate_layout.liquid.html
      {% endblock %}
  {% endraw %}


  ### Snippets

  To conclude with templating basics, it's worth to know that LocomotiveCMS gives you the ability to put some blocks of code in a separate file called snippet, in the same way Rails does with partials.
  That's very useful when you have to build a modular layout without repeating code.

  Like Rails, you can pass a variable to the snippet, or simply include a static bloc of code. The following example will cover both cases, don't bother with the liquid syntax which will be explained in the next part.

      +- Pages
          +- index
      +- Snippets
          +- sidebar
          +- product_information


  Here is the index, which includes the sidebar, and also loops on products model and include the snippet "product_information" at each product item :

      {% raw %}<html>
        <head>
          <title>Snippet example</title>
        </head>
        <body>
          <header>
          </header>
          <div id="content">
            <!-- Loop on products  -->
            {% for product in contents.products %}
              <!-- Include "product_information" snippet with the current product -->
              {% include 'product_information' with product %}
            {% endfor %}
          </div>
          {% include 'sidebar' %}
          <footer>
          </footer>
        </body>
      </html>
  {% endraw %}

  Then the sidebar :

      {% raw %}<div id="sidebar">
        the sidebar
      </div>
  {% endraw %}

  And finally the product_information snippet which uses the context "product" :

      {% raw %}<div class="product">
      {{ product.name }} :  {{ product.price }}$
      </div>
  {% endraw %}


  {% endblock %}
